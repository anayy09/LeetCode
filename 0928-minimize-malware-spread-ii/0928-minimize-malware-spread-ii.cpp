class Solution {
    int solve(vector<int> adj[], vector<vector<int>> &graph, int i, vector<int> &initials) {
        queue<int> q;
        int v = graph.size();
        vector<int> vis(v, 0);
        vis[i] = 1;
        for(auto it: initials) {
            if(it != i) { 
                q.push(it);
                vis[it] = 1;
            }
        }
        int count = 0;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            for(auto it: adj[node]) {
                if(!vis[it]) {
                    q.push(it);
                    count++;
                    vis[it] = 1;
                }
            }
        }
        return count;
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) { 
        int v = graph.size();
        vector<int> adj[v];
        for(int i=0; i<v; i++) {
            for(int j=0; j<v; j++) {
                if(graph[i][j]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int res = INT_MAX, ans;
        int n = initial.size();
        for(int i=0; i<n; i++) {
            int count = solve(adj, graph, initial[i], initial);
            if(count < res) {
                res = count;
                ans = initial[i];
            } else if(count == res) {
                ans = min(ans, initial[i]);
            }
        }
        return ans;
    }
};